name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."

  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the source code from the latest commit
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Cache NPM dependencies (node_modules)
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # Step 3: Install NPM dependencies
      - name: Install NPM dependencies
        run: |
          npm install --legacy-peer-deps

      # Step 4: Debug Cache Key for Salesforce CLI
      - name: Debug Cache Key
        run: |
          echo "Cache Key: ${{ runner.os }}-sfdx-${{ hashFiles('**/package.json') }}"

      # Step 5: Cache Salesforce CLI (in ~/.npm-global)
      - name: Cache Salesforce CLI
        uses: actions/cache@v3
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-sfdx-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-sfdx-

      # Step 6: Install the SFDX CLI (only if it‚Äôs not cached)
      - name: Install the SFDX CLI
        run: |
          npm install -g @salesforce/cli
          sfdx force --help

      # Step 7: Verify Salesforce CLI installation
      - name: Verify Salesforce CLI installation
        run: |
          echo "Salesforce CLI location: $(which sfdx)"
          echo "Salesforce CLI version: $(sfdx --version)"

      # Step 8: Decrypt the server key
      - name: Decrypt server key
        run: |
          mkdir -p assets
          openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out assets/server.key -base64 \
          -K ${{ secrets.ENCRYPTION_KEY }} \
          -iv ${{ secrets.ENCRYPTION_IV }}

      # Step 9: Authenticate with Salesforce using JWT
      - name: Authenticate to Target Org
        run: |
          sfdx force:auth:jwt:grant --instanceurl ${{ secrets.INSTANCE_URL }} \
          --clientid ${{ secrets.CLIENT_ID }} \
          --jwtkeyfile assets/server.key \
          --username ${{ secrets.SALESFORCE_USERNAME }} \
          --setalias TargetOrg   

      # Step 10: Deploy source code against Salesforce Org
      - name: Deploy Source Code Against Salesforce ORG
        run: |
          sf deploy metadata --source-dir force-app --target-org TargetOrg
